import java.util.Scanner;

public class BelmanFordAlgorithm
{
    private int distances[];
    private int numberofvertices;
    public static final int MAX_VALUE = 999;

    public BelmanFordAlgorithm(int numberofvertices)
    {
        this.numberofvertices = numberofvertices;
        distances = new int[numberofvertices + 1];
    }

    public void BellmanFordEvaluation(int source, int[][] adjacencymatrix)
    {
        for (int node = 1; node <= numberofvertices; node++)
        {
            distances[node] = MAX_VALUE;
        }

        distances[source] = 0;
        for (int node = 1; node <= numberofvertices - 1; node++)
        {
            for (int sourcenode = 1; sourcenode <= numberofvertices; sourcenode++)
            {
                for (int destinationnode = 1; destinationnode <= numberofvertices; destinationnode++)
                {
                    if (adjacencymatrix[sourcenode][destinationnode] != MAX_VALUE)
                    {
                        if (distances[destinationnode] > distances[sourcenode]
                                + adjacencymatrix[sourcenode][destinationnode])
                            distances[destinationnode] = distances[sourcenode]
                                    + adjacencymatrix[sourcenode][destinationnode];
                    }
                }
            }
        }

        for (int sourcenode = 1; sourcenode <= numberofvertices; sourcenode++)
        {
            for (int destinationnode = 1; destinationnode <= numberofvertices; destinationnode++)
            {
                if (adjacencymatrix[sourcenode][destinationnode] != MAX_VALUE)
                {
                    if (distances[destinationnode] > distances[sourcenode] + adjacencymatrix[sourcenode][destinationnode])
                        System.out.println("The Graph contains negative edge cycle");
                }
            }
        }

        for (int vertex = 1; vertex <= numberofvertices; vertex++)
        {
            System.out.println("distance of source  " + source + " to " + vertex + " is " + distances[vertex]);
        }
    }

    public static void main(String[] args)
    {
        Scanner scanner = new Scanner(System.in);

        int numberofvertices = 0;
        int source;

        System.out.println("Enter The Number Of Vertices");
        numberofvertices = scanner.nextInt();

        int[][] adjacencymatrix = new int[numberofvertices + 1][numberofvertices + 1];

        System.out.println("Enter Values Into The Adjacency Matrix");
        for (int sourcenode = 1; sourcenode <= numberofvertices; sourcenode++)
        {
            for (int destinationnode = 1; destinationnode <= numberofvertices; destinationnode++)
            {
                adjacencymatrix[sourcenode][destinationnode] = scanner.nextInt();

                if (sourcenode == destinationnode)
                {
                    adjacencymatrix[sourcenode][destinationnode] = 0;
                    continue;
                }

                if (adjacencymatrix[sourcenode][destinationnode] == 0)
                {
                    adjacencymatrix[sourcenode][destinationnode] = MAX_VALUE;
                }
            }
        }

        System.out.println("Enter The Source Vertex");
        source = scanner.nextInt();

        BelmanFordAlgorithm belmanFordAlgorithm = new BelmanFordAlgorithm(numberofvertices);
        belmanFordAlgorithm.BellmanFordEvaluation(source, adjacencymatrix);
        scanner.close();
    }
}



0 3 2 5 Infinity Infinity
3 0 Infinity 1 4 Infinity
2 Infinity 0 2 Infinity 1
5 1 2 0 3 Infinity
Infinity 4 Infinity 3 0 2
Infinity Infinity 1 Infinity 2 0


0 3 2 5 Infinity Infinity
3 0 Infinity 1 4 Infinity
2 Infinity 0 2 Infinity 1
5 1 2 0 3 Infinity
Infinity 4 Infinity 3 0 2
Infinity Infinity 1 Infinity -2 0

0 6 4 5 Infinity  Infinity
Infinity 0 Infinity Infinity -1 Infinity
Infinity -2 0 Infinity 3 Infinity
Infinity Infinity -2 0 Infinity -1
Infinity Infinity Infinity Infinity 0 3
Infinity Infinity Infinity Infinity Infinity 0
